basePath: /
definitions:
  controllers.AchatRequest:
    properties:
      amount:
        type: integer
    type: object
  controllers.DistributeTokensRequest:
    properties:
      amount:
        type: integer
      child:
        type: string
    type: object
  controllers.TokenResponse:
    properties:
      tokens:
        type: integer
    type: object
  controllers.WinnerResponse:
    properties:
      lot:
        $ref: '#/definitions/models.Lot'
      winner:
        type: string
    type: object
  models.BuyTokensResponse:
    properties:
      message:
        type: string
    type: object
  models.ChatMessage:
    properties:
      content:
        type: string
      id:
        type: integer
      receiver_id:
        type: string
      sender_id:
        type: string
      timestamp:
        type: string
    type: object
  models.CreateUserResponse:
    properties:
      message:
        type: string
    type: object
  models.DistributeTokensResponse:
    properties:
      message:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.Kermesse:
    properties:
      created_at:
        type: string
      description:
        type: string
      end_date:
        type: string
      id:
        type: integer
      location:
        type: string
      name:
        type: string
      organisateurs:
        description: Relation many-to-many avec les organisateurs
        items:
          $ref: '#/definitions/models.User'
        type: array
      participants:
        description: Relation many-to-many avec les participants
        items:
          $ref: '#/definitions/models.User'
        type: array
      stands:
        description: Association one-to-many avec les stands
        items:
          $ref: '#/definitions/models.Stand'
        type: array
      start_date:
        type: string
      updated_at:
        type: string
    type: object
  models.KermesseStats:
    properties:
      created_at:
        type: string
      id:
        type: integer
      kermesse_id:
        type: integer
      total_participants:
        type: integer
      total_revenue:
        type: number
      total_tokens_used:
        type: integer
      updated_at:
        type: string
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
    type: object
  models.Lot:
    properties:
      id:
        type: integer
      name:
        type: string
      quantity:
        type: integer
      tombola_id:
        type: integer
      user_won_lots:
        items:
          $ref: '#/definitions/models.UserWonLot'
        type: array
    type: object
  models.MessageResponse:
    properties:
      message:
        type: string
    type: object
  models.OrganisateurStats:
    properties:
      created_at:
        type: string
      id:
        type: integer
      organisateur_id:
        type: integer
      total_kermesses:
        type: integer
      total_revenue:
        type: number
      updated_at:
        type: string
    type: object
  models.ParentChildRequest:
    properties:
      child:
        $ref: '#/definitions/models.User'
      child_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      parent:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Associations
      parent_id:
        type: integer
      status:
        description: pending, accepted, rejected
        type: string
      updated_at:
        type: string
    type: object
  models.PaymentRequest:
    properties:
      amount:
        description: Montant à payer en centimes
        type: integer
      currency:
        description: 'Devise (ex: ''EUR'')'
        type: string
      description:
        description: Description du paiement
        type: string
      source:
        description: 'Source de paiement (ex: un token de carte)'
        type: string
    type: object
  models.PlayerScore:
    properties:
      created_at:
        type: string
      id:
        type: integer
      score:
        type: integer
      stand_id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.ScoreRequest:
    properties:
      score:
        type: integer
    required:
    - score
    type: object
  models.Stand:
    properties:
      created_at:
        description: Date de création du stand
        type: string
      description:
        description: Augmenté la taille pour plus de flexibilité
        type: string
      end_date:
        description: Date de fin du stand
        type: string
      id:
        type: integer
      kermesse:
        allOf:
        - $ref: '#/definitions/models.Kermesse'
        description: Associations
      kermesse_id:
        description: Référence vers la Kermesse
        type: integer
      location:
        description: Lieu où se trouve le stand
        type: string
      name:
        type: string
      owner:
        $ref: '#/definitions/models.User'
      owner_id:
        description: Référence vers le User qui tient le stand
        type: integer
      start_date:
        description: Date de début du stand
        type: string
      stock:
        type: integer
      type:
        description: e.g., "food", "game"
        type: string
      updated_at:
        description: Date de la dernière mise à jour du stand
        type: string
    type: object
  models.StandStats:
    properties:
      created_at:
        type: string
      id:
        type: integer
      items_sold:
        type: integer
      revenue:
        type: number
      stand_id:
        type: integer
      total_tokens_used:
        type: integer
      updated_at:
        type: string
    type: object
  models.Ticket:
    properties:
      id:
        type: integer
      kermesse_id:
        type: integer
      tombola_id:
        type: integer
      user_id:
        type: integer
      winner:
        type: boolean
    type: object
  models.Tombola:
    properties:
      created_at:
        type: string
      id:
        type: integer
      kermesse_id:
        type: integer
      lots:
        description: Relation avec les lots
        items:
          $ref: '#/definitions/models.Lot'
        type: array
      name:
        type: string
      organisateurs:
        description: Relation avec les organisateurs
        items:
          $ref: '#/definitions/models.User'
        type: array
      tickets:
        description: Relation avec les tickets
        items:
          $ref: '#/definitions/models.Ticket'
        type: array
      updated_at:
        type: string
    type: object
  models.Transaction:
    properties:
      amount:
        description: Nombre de jetons utilisés
        type: integer
      currency:
        type: string
      id:
        type: integer
      kermesseID:
        type: integer
      paymentIntent:
        type: string
      stand:
        allOf:
        - $ref: '#/definitions/models.Stand'
        description: Associations
      standID:
        description: Référence vers le stand
        type: integer
      status:
        type: string
      timestamp:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userID:
        description: Référence vers l'utilisateur
        type: integer
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      passwordHash:
        type: string
      resetToken:
        description: Token de réinitialisation
        type: string
      resetTokenExpiry:
        description: Expiration du token de réinitialisation
        type: string
      role:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  models.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      role:
        type: string
      username:
        type: string
    type: object
  models.UserWonLot:
    properties:
      id:
        type: integer
      lot_id:
        type: integer
      tombola_id:
        type: integer
      user_id:
        type: integer
      won_at:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: contact@dratsisama.com
    name: Dr_AtsiSama
    url: http://dratsisama.com
  description: Documentation de l'API pour la gestion des kermesses scolaires avec
    fonctionnalités de stand, tombola, utilisateurs, etc.
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  title: Kermisys API Documentation
  version: "1.0"
paths:
  /forgot-password:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Envoie un lien de réinitialisation à l'utilisateur
      parameters:
      - description: Adresse e-mail
        in: formData
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Mot de passe oublié
      tags:
      - Authentification
  /kermesses:
    get:
      description: Récupère la liste de toutes les kermesses avec pagination et filtres
      parameters:
      - description: Numéro de la page
        in: query
        name: page
        type: integer
      - description: Nombre d'éléments par page
        in: query
        name: limit
        type: integer
      - description: Filtrer par nom de la kermesse
        in: query
        name: name
        type: string
      - description: Filtrer par localisation de la kermesse
        in: query
        name: location
        type: string
      - description: 'Filtrer par date de début (format: YYYY-MM-DD)'
        in: query
        name: startDate
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Kermesse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Récupérer toutes les kermesses
      tags:
      - Kermesses
    post:
      consumes:
      - application/json
      description: Crée une nouvelle kermesse avec les détails fournis
      parameters:
      - description: Détails de la kermesse
        in: body
        name: kermesse
        required: true
        schema:
          $ref: '#/definitions/models.Kermesse'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Kermesse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Créer une nouvelle kermesse
      tags:
      - Kermesses
  /kermesses/{kermesse_id}:
    delete:
      description: Supprime une kermesse par son ID
      parameters:
      - description: ID de la kermesse
        in: path
        name: kermesse_id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Supprimer une kermesse
      tags:
      - Kermesses
    get:
      description: Récupère les détails d'une kermesse par son ID
      parameters:
      - description: ID de la kermesse
        in: path
        name: kermesse_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Kermesse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Récupérer une kermesse par ID
      tags:
      - Kermesses
    put:
      consumes:
      - application/json
      description: Met à jour les détails d'une kermesse existante
      parameters:
      - description: ID de la kermesse
        in: path
        name: kermesse_id
        required: true
        type: integer
      - description: Détails mis à jour de la kermesse
        in: body
        name: kermesse
        required: true
        schema:
          $ref: '#/definitions/models.Kermesse'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Kermesse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Mettre à jour une kermesse
      tags:
      - Kermesses
  /kermesses/{kermesse_id}/participants/{user_id}:
    post:
      description: Ajoute un utilisateur en tant que participant à une kermesse
      parameters:
      - description: ID de la kermesse
        in: path
        name: kermesse_id
        required: true
        type: integer
      - description: ID de l'utilisateur
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Ajouter un participant à une kermesse
      tags:
      - Kermesses
  /kermesses/{kermesse_id}/stands/{stand_id}:
    post:
      description: Ajoute un stand à une kermesse
      parameters:
      - description: ID de la kermesse
        in: path
        name: kermesse_id
        required: true
        type: integer
      - description: ID du stand
        in: path
        name: stand_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Ajouter un stand à une kermesse
      tags:
      - Kermesses
  /kermesses/{kermesse_id}/stands/{stand_id}/player-scores/{user_id}:
    delete:
      description: Permet à un gérant de stand ou organisateur de supprimer le score
        d'un utilisateur pour un stand spécifique d'une kermesse
      parameters:
      - description: ID de la kermesse
        in: path
        name: kermesse_id
        required: true
        type: integer
      - description: ID du stand
        in: path
        name: stand_id
        required: true
        type: integer
      - description: ID de l'utilisateur
        in: path
        name: user_id
        required: true
        type: integer
      responses:
        "200":
          description: Score supprimé avec succès
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Supprimer un score pour un utilisateur et un stand
      tags:
      - Stands
    post:
      consumes:
      - application/json
      description: Permet à un organisateur ou admin d'ajouter ou de mettre à jour
        le score d'un utilisateur pour un stand spécifique
      parameters:
      - description: ID de la kermesse
        in: path
        name: kermesse_id
        required: true
        type: integer
      - description: ID du stand
        in: path
        name: stand_id
        required: true
        type: integer
      - description: ID de l'utilisateur
        in: path
        name: user_id
        required: true
        type: integer
      - description: Score à ajouter
        in: body
        name: score
        required: true
        schema:
          $ref: '#/definitions/models.ScoreRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Score ajouté ou mis à jour avec succès
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Ajouter ou mettre à jour un score pour un utilisateur spécifique et
        un stand
      tags:
      - Stands
  /kermesses/join/{kermesse_id}:
    post:
      description: Permet à un utilisateur de rejoindre une kermesse
      parameters:
      - description: ID de la kermesse
        in: path
        name: kermesse_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Inscription réussie
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Rejoindre une kermesse
      tags:
      - Kermesses
  /kermesses/leave/{kermesse_id}:
    post:
      description: Permet à un utilisateur de quitter une kermesse
      parameters:
      - description: ID de la kermesse
        in: path
        name: kermesse_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Désinscription réussie
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Quitter une kermesse
      tags:
      - Kermesses
  /login:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Authentifie un utilisateur et retourne un jeton JWT
      parameters:
      - description: Nom d'utilisateur
        in: formData
        name: username
        required: true
        type: string
      - description: Mot de passe
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Connexion
      tags:
      - Authentification
  /logout:
    post:
      description: Déconnexion de l'utilisateur
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
      security:
      - Bearer: []
      summary: Déconnexion
      tags:
      - Authentification
  /parent/achat/{user_id}:
    post:
      consumes:
      - application/json
      description: Permet à un utilisateur d'acheter des jetons après un paiement
        réussi
      parameters:
      - description: ID de l'utilisateur
        in: path
        name: user_id
        required: true
        type: integer
      - description: Nombre de jetons à acheter
        in: body
        name: achatRequest
        required: true
        schema:
          $ref: '#/definitions/controllers.AchatRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BuyTokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Achat de jetons
      tags:
      - Jetons
  /parent/distribute-tokens:
    post:
      consumes:
      - application/json
      description: Permet à un parent de distribuer des jetons à son enfant
      parameters:
      - description: Détails de la distribution des jetons
        in: body
        name: distributeTokensRequest
        required: true
        schema:
          $ref: '#/definitions/controllers.DistributeTokensRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DistributeTokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Distribution de jetons
      tags:
      - Jetons
  /payments:
    post:
      consumes:
      - application/json
      description: Traite une demande de paiement en fonction des détails fournis
      parameters:
      - description: Données de paiement
        in: body
        name: paymentData
        required: true
        schema:
          $ref: '#/definitions/models.PaymentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Transaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Processus de paiement
      tags:
      - Paiements
  /payments/user/{userID}:
    get:
      description: Récupère toutes les transactions liées à un utilisateur
      parameters:
      - description: ID de l'utilisateur
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Transaction'
            type: array
      security:
      - Bearer: []
      summary: Récupérer les transactions d'un utilisateur
      tags:
      - Paiements
  /register:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Crée un nouvel utilisateur avec le rôle "parent" par défaut
      parameters:
      - description: Nom d'utilisateur
        in: formData
        name: username
        required: true
        type: string
      - description: Mot de passe
        in: formData
        name: password
        required: true
        type: string
      - description: Adresse e-mail
        in: formData
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Inscription
      tags:
      - Authentification
  /reset-password:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Permet à un utilisateur de réinitialiser son mot de passe
      parameters:
      - description: Token de réinitialisation
        in: formData
        name: token
        required: true
        type: string
      - description: Nouveau mot de passe
        in: formData
        name: newPassword
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Réinitialiser le mot de passe
      tags:
      - Authentification
  /stands:
    get:
      description: Récupère la liste de tous les stands avec pagination
      parameters:
      - default: 1
        description: Numéro de la page
        in: query
        name: page
        type: integer
      - default: 10
        description: Nombre d'éléments par page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Stand'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Récupérer tous les stands avec pagination
      tags:
      - Stands
    post:
      consumes:
      - application/json
      description: Ajoute un nouveau stand et associe l'utilisateur créateur en tant
        que propriétaire
      parameters:
      - description: Détails du stand (Nom, Description, etc.)
        in: body
        name: stand
        required: true
        schema:
          $ref: '#/definitions/models.Stand'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Stand'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Créer un stand
      tags:
      - Stands
  /stands/{id}:
    delete:
      description: Supprime un stand par son ID
      parameters:
      - description: ID du stand
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: Stand deleted
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Supprimer un stand
      tags:
      - Stands
    get:
      description: Récupère les détails d'un stand par son ID
      parameters:
      - description: ID du stand
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Stand'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Récupérer un stand par ID
      tags:
      - Stands
    put:
      consumes:
      - application/json
      description: Met à jour les détails d'un stand existant
      parameters:
      - description: ID du stand
        in: path
        name: id
        required: true
        type: integer
      - description: Détails du stand
        in: body
        name: stand
        required: true
        schema:
          $ref: '#/definitions/models.Stand'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Stand'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Mettre à jour un stand
      tags:
      - Stands
  /stands/{id}/interact:
    post:
      description: Permet à un utilisateur d'interagir avec un stand spécifique
      parameters:
      - description: ID du stand
        in: path
        name: id
        required: true
        type: integer
      - description: 'Action effectuée (ex: ''buy_item'', ''play_game'')'
        in: query
        name: action
        required: true
        type: string
      - description: Quantité à affecter (par défaut 1)
        in: query
        name: quantity
        type: integer
      responses:
        "200":
          description: Interaction réussie
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Interagir avec un stand
      tags:
      - Stands
  /stands/{stand_id}/players/{user_id}/score:
    get:
      description: Retourne le score d'un joueur pour un stand spécifique
      parameters:
      - description: ID du stand
        in: path
        name: stand_id
        required: true
        type: integer
      - description: ID de l'utilisateur
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PlayerScore'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Récupérer le score d'un joueur pour un stand spécifique
      tags:
      - Stands
  /stats/kermesse/{id}:
    get:
      description: Récupère les statistiques de la kermesse par ID
      parameters:
      - description: ID de la kermesse
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.KermesseStats'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Obtenir les statistiques de la kermesse
      tags:
      - Statistiques
  /stats/organisateur/{id}:
    get:
      description: Récupère les statistiques de l'organisateur par ID
      parameters:
      - description: ID de l'organisateur
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OrganisateurStats'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Obtenir les statistiques de l'organisateur
      tags:
      - Statistiques
  /stats/stand/{id}:
    get:
      description: Récupère les statistiques d'un stand par ID
      parameters:
      - description: ID du stand
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StandStats'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Obtenir les statistiques d'un stand
      tags:
      - Statistiques
  /tombolas/{tombola_id}:
    get:
      description: Permet d'afficher une tombola et les lots associés
      parameters:
      - description: ID de la tombola
        in: path
        name: tombola_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tombola'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Afficher une tombola avec ses lots
      tags:
      - Tombolas
  /tombolas/{tombola_id}/buy-ticket:
    post:
      description: Permet à un utilisateur d'acheter un ticket de tombola (maximum
        1 par kermesse)
      parameters:
      - description: ID de la tombola
        in: path
        name: tombola_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Ticket acheté avec succès
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Acheter un ticket de tombola
      tags:
      - Tombolas
  /tombolas/{tombola_id}/delete:
    delete:
      description: Supprime une tombola existante (réservé aux organisateurs ou admins)
      parameters:
      - description: ID de la tombola
        in: path
        name: tombola_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Tombola supprimée avec succès
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Supprimer une tombola
      tags:
      - Tombolas
  /tombolas/{tombola_id}/draw:
    post:
      description: Permet de réaliser le tirage au sort d'une tombola et d'annoncer
        le gagnant
      parameters:
      - description: ID de la tombola
        in: path
        name: tombola_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.WinnerResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Tirage au sort d'une tombola
      tags:
      - Tombolas
  /tombolas/{tombola_id}/edit:
    put:
      description: Modifie une tombola existante (réservé aux organisateurs ou admins)
      parameters:
      - description: ID de la tombola
        in: path
        name: tombola_id
        required: true
        type: integer
      - description: Nouveaux détails de la tombola (nom et KermesseID)
        in: body
        name: tombola
        required: true
        schema:
          $ref: '#/definitions/models.Tombola'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tombola'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Modifier une tombola (seul le nom et la KermesseID peuvent être modifiés)
      tags:
      - Tombolas
  /tombolas/{tombola_id}/lot:
    post:
      description: Permet d'ajouter un lot à une tombola (réservé aux organisateurs
        ou admins)
      parameters:
      - description: ID de la tombola
        in: path
        name: tombola_id
        required: true
        type: integer
      - description: Lot à ajouter
        in: body
        name: lot
        required: true
        schema:
          $ref: '#/definitions/models.Lot'
      responses:
        "200":
          description: Lot ajouté avec succès
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Ajouter un lot à une tombola
      tags:
      - Tombolas
  /tombolas/{tombola_id}/lot/{lot_id}:
    delete:
      description: Permet de retirer un lot d'une tombola (réservé aux organisateurs
        ou admins)
      parameters:
      - description: ID de la tombola
        in: path
        name: tombola_id
        required: true
        type: integer
      - description: ID du lot
        in: path
        name: lot_id
        required: true
        type: integer
      responses:
        "200":
          description: Lot retiré avec succès
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Retirer un lot d'une tombola
      tags:
      - Tombolas
  /tombolas/{tombola_id}/lots-won:
    get:
      description: Permet de récupérer la liste des lots gagnés par l'utilisateur
        pour une tombola donnée
      parameters:
      - description: ID de la tombola
        in: path
        name: tombola_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Lot'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Récupérer les lots gagnés par un utilisateur
      tags:
      - Tombolas
  /tombolas/create/{kermesse_id}:
    post:
      description: Crée une nouvelle tombola (réservé aux organisateurs ou aux admins)
      parameters:
      - description: ID de la kermesse
        in: path
        name: kermesse_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Tombola'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Créer une tombola
      tags:
      - Tombolas
  /user:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Crée un nouvel utilisateur avec le nom d'utilisateur, l'adresse
        e-mail, et le rôle spécifiés
      parameters:
      - description: Nom d'utilisateur
        in: formData
        name: username
        required: true
        type: string
      - description: Adresse e-mail
        in: formData
        name: email
        required: true
        type: string
      - description: 'Rôle de l''utilisateur (ex: ''parent'', ''enfant'', ''organisateur'')'
        in: formData
        name: role
        required: true
        type: string
      - description: Mot de passe de l'utilisateur
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Créer un nouvel utilisateur
      tags:
      - Utilisateurs
  /user/{username}:
    get:
      description: Récupère les informations d'un utilisateur à partir de son nom
        d'utilisateur
      parameters:
      - description: Nom d'utilisateur
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Récupérer les détails d'un utilisateur
      tags:
      - Utilisateurs
  /user/children:
    get:
      description: Renvoie la liste de tous les enfants associés à un parent spécifique
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Liste des enfants associés à un parent
      tags:
      - Parent-Enfant
  /user/children/{child_id}:
    delete:
      description: Permet de désassocier un enfant d'un parent et de lui réassigner
        le rôle par défaut "parent"
      parameters:
      - description: ID de l'enfant
        in: path
        name: child_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Supprimer un enfant associé à un parent
      tags:
      - Parent-Enfant
  /user/parent-requests:
    post:
      consumes:
      - application/json
      description: Permet de créer une nouvelle demande pour lier un parent et un
        enfant en utilisant leurs noms d'utilisateur
      parameters:
      - description: Nom d'utilisateur du parent
        in: formData
        name: parent_username
        required: true
        type: string
      - description: Nom d'utilisateur de l'enfant
        in: formData
        name: child_username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ParentChildRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Ajouter une demande parent-enfant
      tags:
      - Parent-Enfant
  /user/parent-requests/accept/{id}:
    put:
      description: Permet d'accepter une demande existante pour lier un parent et
        un enfant
      parameters:
      - description: ID de la demande
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ParentChildRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Accepter une demande parent-enfant
      tags:
      - Parent-Enfant
  /user/parent-requests/reject/{id}:
    put:
      description: Permet de refuser une demande existante pour lier un parent et
        un enfant
      parameters:
      - description: ID de la demande
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ParentChildRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Refuser une demande parent-enfant
      tags:
      - Parent-Enfant
  /user/parent-requests/requests:
    get:
      description: Renvoie la liste de toutes les demandes en attente de traitement
        pour l'utilisateur connecté
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ParentChildRequest'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Liste des demandes parent-enfant pour l'utilisateur connecté
      tags:
      - Parent-Enfant
  /user/tokens:
    get:
      description: Renvoie le total des jetons disponibles pour l'utilisateur connecté
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Récupérer le nombre de jetons de l'utilisateur connecté
      tags:
      - Jetons
  /ws/history:
    get:
      description: Récupère l'historique des messages entre deux utilisateurs, avec
        pagination
      parameters:
      - description: ID de l'expéditeur
        in: query
        name: sender_id
        required: true
        type: string
      - description: ID du destinataire
        in: query
        name: receiver_id
        required: true
        type: string
      - default: 50
        description: Nombre de messages à récupérer
        in: query
        name: limit
        type: integer
      - default: 1
        description: Numéro de page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ChatMessage'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Récupérer l'historique des messages
      tags:
      - Chat
  /ws/private:
    get:
      description: Établit une connexion WebSocket pour la discussion privée en temps
        réel entre un organisateur et un gérant de stand
      parameters:
      - description: 'Identifiant de l''utilisateur (ex : username)'
        in: query
        name: userID
        required: true
        type: string
      responses:
        "101":
          description: Switching Protocols" - WebSocket handshake success
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: WebSocket Chat Privé
      tags:
      - WebSocket
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
