basePath: /
definitions:
  models.BuyTokensResponse:
    properties:
      message:
        type: string
    type: object
  models.BuyTombolaTicketResponse:
    properties:
      message:
        type: string
    type: object
  models.CreateUserResponse:
    properties:
      message:
        type: string
    type: object
  models.DistributeTokensResponse:
    properties:
      message:
        type: string
    type: object
  models.DrawTombolaResponse:
    properties:
      winner:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.Kermesse:
    properties:
      createdAt:
        type: string
      endDate:
        type: string
      id:
        type: integer
      location:
        type: string
      name:
        type: string
      startDate:
        type: string
      updatedAt:
        type: string
    type: object
  models.KermesseStats:
    properties:
      created_at:
        type: string
      id:
        type: integer
      kermesse_id:
        type: integer
      total_participants:
        type: integer
      total_revenue:
        type: number
      total_tokens_used:
        type: integer
      updated_at:
        type: string
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
    type: object
  models.MessageResponse:
    properties:
      message:
        type: string
    type: object
  models.OrganisateurStats:
    properties:
      created_at:
        type: string
      id:
        type: integer
      organisateur_id:
        type: integer
      total_kermesses:
        type: integer
      total_revenue:
        type: number
      updated_at:
        type: string
    type: object
  models.PaymentRequest:
    properties:
      amount:
        description: Montant à payer en centimes
        type: integer
      currency:
        description: 'Devise (ex: ''EUR'')'
        type: string
      description:
        description: Description du paiement
        type: string
      source:
        description: 'Source de paiement (ex: un token de carte)'
        type: string
    type: object
  models.PaymentResponse:
    properties:
      chargeID:
        description: L'identifiant du paiement
        type: string
    type: object
  models.Stand:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      kermesse:
        allOf:
        - $ref: '#/definitions/models.Kermesse'
        description: Associations
      kermesseID:
        description: Référence vers la Kermesse
        type: integer
      name:
        type: string
      owner:
        $ref: '#/definitions/models.User'
      ownerID:
        description: Référence vers le User qui tient le stand
        type: integer
      stock:
        type: integer
      type:
        type: string
      updatedAt:
        type: string
    type: object
  models.StandInteractionResponse:
    properties:
      message:
        type: string
    type: object
  models.StandStats:
    properties:
      created_at:
        type: string
      id:
        type: integer
      items_sold:
        type: integer
      revenue:
        type: number
      stand_id:
        type: integer
      total_tokens_used:
        type: integer
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      passwordHash:
        type: string
      resetToken:
        description: Token de réinitialisation
        type: string
      resetTokenExpiry:
        description: Expiration du token de réinitialisation
        type: string
      role:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  models.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      role:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: contact@dratsisama.com
    name: Dr_AtsiSama
    url: http://dratsisama.com
  description: Documentation de l'API pour la gestion des kermesses scolaires avec
    fonctionnalités de stand, tombola, utilisateurs, etc.
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  title: Kermisys API Documentation
  version: "1.0"
paths:
  /forgot-password:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Envoie un lien de réinitialisation à l'utilisateur
      parameters:
      - description: Adresse e-mail
        in: formData
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Mot de passe oublié
      tags:
      - Authentification
  /interact-stand:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Permet à un utilisateur d'interagir avec un stand spécifique (nourriture,
        boisson, activité, etc.)
      parameters:
      - description: Nom d'utilisateur
        in: header
        name: username
        required: true
        type: string
      - description: 'Type de stand (ex: ''food'', ''drink'', ''activity'')'
        in: formData
        name: stand
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StandInteractionResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Interaction avec un stand
      tags:
      - Stands
  /login:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Authentifie un utilisateur et retourne un jeton JWT
      parameters:
      - description: Nom d'utilisateur
        in: formData
        name: username
        required: true
        type: string
      - description: Mot de passe
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Connexion
      tags:
      - Authentification
  /logout:
    post:
      description: Déconnexion de l'utilisateur
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
      summary: Déconnexion
      tags:
      - Authentification
  /payment:
    post:
      consumes:
      - application/json
      description: Traite une demande de paiement en fonction des détails fournis
      parameters:
      - description: Données de paiement
        in: body
        name: paymentData
        required: true
        schema:
          $ref: '#/definitions/models.PaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaymentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Processus de paiement
      tags:
      - Paiement
  /register:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Crée un nouvel utilisateur
      parameters:
      - description: Nom d'utilisateur
        in: formData
        name: username
        required: true
        type: string
      - description: Mot de passe
        in: formData
        name: password
        required: true
        type: string
      - description: Adresse e-mail
        in: formData
        name: email
        required: true
        type: string
      - description: Rôle de l'utilisateur
        in: formData
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Inscription
      tags:
      - Authentification
  /reset-password:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Permet à un utilisateur de réinitialiser son mot de passe
      parameters:
      - description: Token de réinitialisation
        in: formData
        name: token
        required: true
        type: string
      - description: Nouveau mot de passe
        in: formData
        name: newPassword
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Réinitialiser le mot de passe
      tags:
      - Authentification
  /stands:
    get:
      description: Récupère la liste de tous les stands
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Stand'
            type: array
      summary: Récupérer tous les stands
      tags:
      - Stands
    post:
      consumes:
      - application/json
      description: Ajoute un nouveau stand
      parameters:
      - description: Détails du stand
        in: body
        name: stand
        required: true
        schema:
          $ref: '#/definitions/models.Stand'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Stand'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Créer un stand
      tags:
      - Stands
  /stands/{id}:
    delete:
      description: Supprime un stand par son ID
      parameters:
      - description: ID du stand
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: Stand deleted
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Supprimer un stand
      tags:
      - Stands
    get:
      description: Récupère un stand par son ID
      parameters:
      - description: ID du stand
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Stand'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Récupérer un stand
      tags:
      - Stands
    put:
      consumes:
      - application/json
      description: Met à jour les détails d'un stand
      parameters:
      - description: ID du stand
        in: path
        name: id
        required: true
        type: integer
      - description: Détails du stand
        in: body
        name: stand
        required: true
        schema:
          $ref: '#/definitions/models.Stand'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Stand'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Mettre à jour un stand
      tags:
      - Stands
  /stats:
    get:
      description: Renvoie les statistiques actuelles du système
      produces:
      - application/json
      responses:
        "200":
          description: Statistiques actuelles
          schema:
            additionalProperties: true
            type: object
      summary: Récupérer les statistiques
      tags:
      - Statistiques
  /stats/kermesse/{id}:
    get:
      description: Récupère les statistiques de la kermesse par ID
      parameters:
      - description: ID de la kermesse
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.KermesseStats'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Obtenir les statistiques de la kermesse
      tags:
      - Statistiques
  /stats/organisateur/{id}:
    get:
      description: Récupère les statistiques de l'organisateur par ID
      parameters:
      - description: ID de l'organisateur
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OrganisateurStats'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Obtenir les statistiques de l'organisateur
      tags:
      - Statistiques
  /stats/stand/{id}:
    get:
      description: Récupère les statistiques d'un stand par ID
      parameters:
      - description: ID du stand
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StandStats'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Obtenir les statistiques d'un stand
      tags:
      - Statistiques
  /tokens/buy:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Permet à un utilisateur d'acheter des jetons
      parameters:
      - description: Nom d'utilisateur
        in: header
        name: username
        required: true
        type: string
      - description: Nombre de jetons à acheter
        in: formData
        name: amount
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BuyTokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Achat de jetons
      tags:
      - Jetons
  /tokens/distribute:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Permet à un parent de distribuer des jetons à son enfant
      parameters:
      - description: Nom d'utilisateur du parent
        in: header
        name: username
        required: true
        type: string
      - description: Nom d'utilisateur de l'enfant
        in: formData
        name: child
        required: true
        type: string
      - description: Nombre de jetons à distribuer
        in: formData
        name: amount
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DistributeTokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Distribution de jetons
      tags:
      - Jetons
  /tombola/buy:
    post:
      description: Permet à un utilisateur d'acheter un billet de tombola
      parameters:
      - description: Nom d'utilisateur
        in: header
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BuyTombolaTicketResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Acheter un billet de tombola
      tags:
      - Tombola
  /tombola/draw:
    post:
      description: Effectue le tirage de la tombola et retourne le gagnant
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DrawTombolaResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Tirage de la tombola
      tags:
      - Tombola
  /user:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Crée un nouvel utilisateur avec le nom d'utilisateur, l'adresse
        e-mail, et le rôle spécifiés
      parameters:
      - description: Nom d'utilisateur
        in: formData
        name: username
        required: true
        type: string
      - description: Adresse e-mail
        in: formData
        name: email
        required: true
        type: string
      - description: 'Rôle de l''utilisateur (ex: ''parent'', ''enfant'', ''organisateur'')'
        in: formData
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Créer un nouvel utilisateur
      tags:
      - Utilisateurs
  /user/{username}:
    get:
      description: Récupère les informations d'un utilisateur à partir de son nom
        d'utilisateur
      parameters:
      - description: Nom d'utilisateur
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - Bearer: []
      summary: Récupérer les détails d'un utilisateur
      tags:
      - Utilisateurs
  /ws/private:
    get:
      description: Établit une connexion WebSocket pour la discussion privée en temps
        réel entre un organisateur et un gérant de stand
      parameters:
      - description: 'Identifiant de l''utilisateur (ex : username)'
        in: query
        name: userID
        required: true
        type: string
      responses:
        "101":
          description: Switching Protocols" - WebSocket handshake success
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: WebSocket Chat Privé
      tags:
      - WebSocket
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
